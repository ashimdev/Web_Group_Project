/**
 * CentennialVideoPlatform
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-07-27T17:26:08Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';


import { Empty } from '../model/empty';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { Observable } from 'rxjs';


@Injectable({
	providedIn: 'root',
})
export class DefaultService {

    protected basePath = 'https://5bx253evpk.execute-api.us-east-1.amazonaws.com/dev';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public signedurlPost(pFileName: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public signedurlPost(pFileName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public signedurlPost(pFileName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public signedurlPost(pFileName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Empty>(`${this.basePath}/signedurl`,
            {
                fileName: pFileName
            },
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public signedurlThumbnailPost(pFileName: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public signedurlThumbnailPost(pFileName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public signedurlThumbnailPost(pFileName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public signedurlThumbnailPost(pFileName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Empty>(`${this.basePath}/thumbnailSignedURL`,
            {
                fileName: pFileName
            },
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userGet(observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public userGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public userGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public userGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Empty>(`${this.basePath}/user`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userPost(postBody: any, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public userPost(postBody: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public userPost(postBody: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public userPost(postBody: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Empty>(`${this.basePath}/user`,
            postBody,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param userID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userUserIDDelete(userID: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public userUserIDDelete(userID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public userUserIDDelete(userID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public userUserIDDelete(userID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userID === null || userID === undefined) {
            throw new Error('Required parameter userID was null or undefined when calling userUserIDDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Empty>(`${this.basePath}/user/${encodeURIComponent(String(userID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param userID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userUserIDGet(userID: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public userUserIDGet(userID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public userUserIDGet(userID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public userUserIDGet(userID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userID === null || userID === undefined) {
            throw new Error('Required parameter userID was null or undefined when calling userUserIDGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Empty>(`${this.basePath}/user/${encodeURIComponent(String(userID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public videoGet(observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public videoGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public videoGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public videoGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Empty>(`${this.basePath}/video`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public videoPost(videoPlaylistID: string, videoPostBody: any, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public videoPost(videoPlaylistID: string, videoPostBody: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public videoPost(videoPlaylistID: string, videoPostBody: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public videoPost(videoPlaylistID: string, videoPostBody: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Empty>(`${this.basePath}/videoPlaylist/${videoPlaylistID}/video`,
            videoPostBody,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param videoID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public videoVideoIDDelete(videoID: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public videoVideoIDDelete(videoID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public videoVideoIDDelete(videoID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public videoVideoIDDelete(videoID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (videoID === null || videoID === undefined) {
            throw new Error('Required parameter videoID was null or undefined when calling videoVideoIDDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Empty>(`${this.basePath}/video/${encodeURIComponent(String(videoID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public videoplaylistGet(observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public videoplaylistGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public videoplaylistGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public videoplaylistGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Empty>(`${this.basePath}/videoplaylist`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public videoplaylistPost(postBody: any, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public videoplaylistPost(postBody: any, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public videoplaylistPost(postBody: any, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public videoplaylistPost(postBody: any, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Empty>(`${this.basePath}/videoplaylist`,
        postBody,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param videoPlaylistID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public videoplaylistVideoPlaylistIDDelete(videoPlaylistID: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public videoplaylistVideoPlaylistIDDelete(videoPlaylistID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public videoplaylistVideoPlaylistIDDelete(videoPlaylistID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public videoplaylistVideoPlaylistIDDelete(videoPlaylistID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (videoPlaylistID === null || videoPlaylistID === undefined) {
            throw new Error('Required parameter videoPlaylistID was null or undefined when calling videoplaylistVideoPlaylistIDDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Empty>(`${this.basePath}/videoplaylist/${encodeURIComponent(String(videoPlaylistID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param videoPlaylistID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public videoplaylistVideoPlaylistIDGet(videoPlaylistID: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public videoplaylistVideoPlaylistIDGet(videoPlaylistID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public videoplaylistVideoPlaylistIDGet(videoPlaylistID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public videoplaylistVideoPlaylistIDGet(videoPlaylistID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (videoPlaylistID === null || videoPlaylistID === undefined) {
            throw new Error('Required parameter videoPlaylistID was null or undefined when calling videoplaylistVideoPlaylistIDGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Empty>(`${this.basePath}/videoplaylist/${encodeURIComponent(String(videoPlaylistID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param videoPlaylistID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public videoplaylistVideoPlaylistIDPut(videoPlaylistID: string, observe?: 'body', reportProgress?: boolean): Observable<Empty>;
    public videoplaylistVideoPlaylistIDPut(videoPlaylistID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Empty>>;
    public videoplaylistVideoPlaylistIDPut(videoPlaylistID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Empty>>;
    public videoplaylistVideoPlaylistIDPut(videoPlaylistID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (videoPlaylistID === null || videoPlaylistID === undefined) {
            throw new Error('Required parameter videoPlaylistID was null or undefined when calling videoplaylistVideoPlaylistIDPut.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<Empty>(`${this.basePath}/videoplaylist/${encodeURIComponent(String(videoPlaylistID))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
